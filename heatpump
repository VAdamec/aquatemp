#!/bin/bash

#Get setting etc

path=`dirname "$0":`
username=`cat $path/settings | grep username | cut -f2`
password=`cat $path/settings | grep password | cut -f2`
mqtt=`cat $path/settings | grep mqttserver | cut -f2`
mqttuser=`cat $path/settings | grep mqttuser | cut -f2`
mqttpass=`cat $path/settings | grep mqttpass | cut -f2`
mqttport=`cat $path/settings | grep mqttport | cut -f2`
cloudurl="https://cloud.linked-go.com/cloudservice/api"
name=`cat $path/settings | grep hassname | cut -f2`

mkdir -p $path/tmp

update()
{
token=`curl -s -H "Content-Type: application/json; charset=utf-8" -X POST \
	-d '{"user_name":"'$username'",
		"password":"'$password'",
		"type":"2"}' $cloudurl/app/user/login.json | 
		jq -r '.object_result."x-token"'`
echo $token > $path/tmp/token

device=`curl -s -H "Content-Type: application/json; charset=utf-8" \
	-H "x-token: $token" -X POST $cloudurl/app/device/deviceList.json |
	jq -r '.object_result[]."device_code"'`
echo $device > $path/tmp/device
}

check=`find $path/tmp/token -newermt '-86400 seconds' | wc -l`
if [ $check -lt "1" ]; then
        update
fi

token=`cat $path/tmp/token`
device=`cat $path/tmp/device`


power()
{
	curl -s -H "Content-Type: application/json; charset=utf-8" \
	-H "x-token: $token" \
	-d '{"param":[{"device_code":"'$device'","protocol_code":"power","value":"'$1'"}]}' \
	-X POST $cloudurl/app/device/control.json
}

#Install entities to Hass
if [ $1 = "install" ]; then
	echo install

	install()
	{
	mosquitto_pub -r -h $mqtt -p $mqttport -u $mqttuser -P $mqttpass \
		-t "homeassistant/$1/"$name"_"$3"/config" \
		-m '{"name": "'$name' '"$2"'", 
			"state_topic": "homeassistant/'$1'/'$name'_'$3'/state"}'
	}

	install_dt()
	{
	mosquitto_pub -r -h $mqtt -p $mqttport -u $mqttuser -P $mqttpass \
		-t "homeassistant/$1/"$name"_"$3"/config" \
		-m '{"name": "'$name' '"$2"'", 
			"device_class": "'$4'", 
			"unit_of_measurement": "'$5'", 
			"state_topic": "homeassistant/'$1'/'$name'_'$3'/state"}'
	}

	install sensor "Status" status
	install binary_sensor "Power" power
	install binary_sensor "Silent" silent
	install_dt sensor "Settemp" settemp temperature °C
	install_dt sensor "Readtemp" readtemp temperature °C
	install_dt sensor "Inlet" inlet temperature °C
	install_dt sensor "Outlet" outlet temperature °C
	install sensor "Mode State" mode_state 
	install sensor "Mode Set" mode_set 
	install sensor "Error msg" error_msg
	install sensor "Is fault" is_fault
	install_dt sensor "Ambient" ambient temperature °C
	install_dt sensor "Coil" coil temperature °C
	install_dt sensor "Suction" suction temperature °C

	mosquitto_pub -r -h $mqtt -p $mqttport -u $mqttuser -P $mqttpass \
		-t "homeassistant/switch/"$name"_silent/config" \
		-m '{"name": "'$name' Silent",
			"command_topic": "homeassistant/switch/'$name'_silent/set",
			"state_topic": "homeassistant/binary_sensor/'$name'_silent/state"}'

	mosquitto_pub -r -h $mqtt -p $mqttport -u $mqttuser -P $mqttpass \
		-t "homeassistant/climate/$name/config" \
		-m '{"name":"'$name'",
			"current_temperature_topic":"homeassistant/sensor/'$name'_inlet/state",
			"mode_command_topic":"homeassistant/sensor/'$name'_mode_set/state",
			"mode_state_topic":"homeassistant/sensor/'$name'_mode_state/state",
			"temperature_command_topic":"homeassistant/sensor/'$name'_settemp/state",
			"temperature_state_topic":"homeassistant/sensor/'$name'_readtemp/state",
			"temperature_unit":"C",
			"min_temp":"15",
			"max_temp":"35",
			"temp_step":"0.5",
			"modes":["off", "heat", "cool", "auto"]}'

#uninstall entities from Hass
elif [ $1 = "uninstall" ]; then
	echo uninstall
	uninstall()
	{
		mosquitto_pub -r -h $mqtt -p $mqttport -u $mqttuser -P $mqttpass -m '' -t "homeassistant/"$1"/"$name"_"$2"/config"
	}
	uninstall sensor status
	uninstall binary_sensor power
	uninstall binary_sensor silent
	uninstall sensor settemp
	uninstall sensor inlet
	uninstall sensor outlet
	uninstall sensor mode_state
	uninstall sensor mode_set
	uninstall sensor settemp
	uninstall sensor readtemp
	uninstall sensor error_msg
	uninstall sensor is_fault
	uninstall sensor ambient
	uninstall sensor coil
	uninstall sensor suction
	uninstall switch silent

	mosquitto_pub -r -h $mqtt -p $mqttport -u $mqttuser -P $mqttpass -m '' -t "homeassistant/climate/$name/config"

elif [ $1 = "status" ]; then
	curl -s -H "Content-Type: application/json; charset=utf-8" \
	-H "x-token: $token" \
	-d '{"device_code":"'$device'"}' \
	-X POST $cloudurl/app/device/getDeviceStatus.json > $path/tmp/status

	online=`cat $path/tmp/status | jq -r '.object_result."status"'`
	is_fault=`cat $path/tmp/status | jq -r '.object_result."is_fault"'`
	if [ $is_fault = "true" ];then
		curl -s -H "Content-Type: application/json; charset=utf-8" \
		-H "x-token: $token" \
		-d '{"device_code":"'$device'"}' \
		-X POST $cloudurl/app/device/getFaultDataByDeviceCode.json > $path/tmp/fault
		error_msg=`cat $path/tmp/fault | jq -r '.object_result[]."description"'`
		mosquitto_pub -r -h $mqtt -p $mqttport -u $mqttuser -P $mqttpass \
			-m "${error_msg}" \
			-t "homeassistant/sensor/"$name"_error_msg/state"

	elif [ $is_fault = "false" ];then
		error_msg="No Error"
		mosquitto_pub -r -h $mqtt -p $mqttport -u $mqttuser -P $mqttpass \
			-m "${error_msg}" \
			-t "homeassistant/sensor/"$name"_error_msg/state"
	fi
	
	status()
	{
	mosquitto_pub -r -h $mqtt -p $mqttport -u $mqttuser -P $mqttpass \
		-m "${1}" \
		-t "homeassistant/sensor/"$name"_"$2"/state"
	}

	status $online status
	status $is_fault is_fault

elif [ $1 = "test" ]; then
	curl -s -H "Content-Type: application/json; charset=utf-8" \
	-H "x-token: $token" \
	-d '{"device_code":"'$device'","protocal_codes":["'$2'"]}' \
	-X POST $cloudurl/app/device/getDataByCode.json > $path/tmp/test
	cat $path/tmp/test


elif [ $1 = "info" ]; then
	echo info
	curl -s -H "Content-Type: application/json; charset=utf-8" \
	-H "x-token: $token" \
	-d '{"device_code":"'$device'","protocal_codes":["Power","Mode","Manual-mute","T01","T02","2074","2075","2076","2077","H03","Set_Temp","R08","R09","R10","R11","R01","R02","R03","T03","1158","1159","F17","H02","T04","T05"]}' \
	-X POST $cloudurl/app/device/getDataByCode.json > $path/tmp/info

	power=`cat $path/tmp/info | jq '.object_result[] | select(.code=="Power")' | jq -r '.value'`
	readtemp=`cat $path/tmp/info | jq '.object_result[] | select(.code=="Set_Temp")' | jq -r '.value'`
	suctiontemp=`cat $path/tmp/info | jq '.object_result[] | select(.code=="T01")' | jq -r '.value'`
	inlettemp=`cat $path/tmp/info | jq '.object_result[] | select(.code=="T02")' | jq -r '.value'`
	outlettemp=`cat $path/tmp/info | jq '.object_result[] | select(.code=="T03")' | jq -r '.value'`
	coiltemp=`cat $path/tmp/info | jq '.object_result[] | select(.code=="T04")' | jq -r '.value'`
	ambienttemp=`cat $path/tmp/info | jq '.object_result[] | select(.code=="T05")' | jq -r '.value'`
	mode=`cat $path/tmp/info | jq '.object_result[] | select(.code=="Mode")' | jq -r '.value'`
	silent=`cat $path/tmp/info | jq '.object_result[] | select(.code=="Manual-mute")' | jq -r '.value'`


mosquitto_status()
{
	        mosquitto_pub -r -h $mqtt -p $mqttport -u $mqttuser -P $mqttpass \
                -m "${2}" \
                -t "homeassistant/$1/"$name"_$3/state"
}

	mosquitto_status sensor $readtemp readtemp
	mosquitto_status sensor $inlettemp inlet
	mosquitto_status sensor $outlettemp outlet
	mosquitto_status sensor $ambienttemp ambient
	mosquitto_status sensor $coiltemp coil
	mosquitto_status sensor $suctiontemp suction

	if [ $silent = "0" ];then

		mosquitto_status binary_sensor OFF silent

	elif [ $silent = "1" ];then
		mosquitto_status binary_sensor ON silent
	fi


	if [ $power = "0" ];then
		mosquitto_status sensor off mode_state
		mosquitto_status binary_sensor OFF power

	elif [ $power = "1" ];then
		mosquitto_status binary_sensor ON power
		if [ $mode = "0" ];then
			mosquitto_status sensor cool mode_state
		elif [ $mode = "1" ];then
			mosquitto_status sensor heat mode_state
		elif [ $mode = "2" ];then
			mosquitto_status sensor auto mode_state
		fi
	fi

#control

elif [ $1 = "on" ]; then
	power 1

elif [ $1 = "off" ]; then
	power 0

elif [ $1 = "temp" ]; then
	temp=$2
	curl -s -H "Content-Type: application/json; charset=utf-8" \
	-H "x-token: $token" \
	-d '{"param":[{"device_code":"'$device'","protocol_code":"R02","value":"'$temp'"},{"device_code":"'$device'","protocol_code":"Set_Temp","value":"'$temp'"}]}' \
	-X POST $cloudurl/app/device/control.json

elif [ $1 = "silent" ]; then
	if [ $2 = "ON" ];then
		mode="1"
	elif [ $2 = "OFF" ];then
		mode="0"
	fi
	curl -s -H "Content-Type: application/json; charset=utf-8" \
	-H "x-token: $token" \
	-d '{"param":[{"device_code":"'$device'","protocol_code":"Manual-mute","value":"'$mode'"}]}' \
	-X POST $cloudurl/app/device/control.json

elif [ $1 = "mode" ]; then

	mode()
	{
		curl -s -H "Content-Type: application/json; charset=utf-8" \
                -H "x-token: $token" \
                -d '{"param":[{"device_code":"'$device'","protocol_code":"mode","value":"'$mode'"}]}' \
                -X POST $cloudurl/app/device/control.json
	}

	if [ $2 = "heat" ];then
		mode="1"
		mode

	elif [ $2 = "cool" ];then
		mode="0"
		mode

	elif [ $2 = "auto" ];then
		mode="2"
		mode
	fi
fi


#!/bin/bash

#Get setting etc

path=`dirname "$0":`
username=`cat $path/settings | grep username | cut -f2`
password=`cat $path/settings | grep password | cut -f2`
mqtt=`cat $path/settings | grep mqttserver | cut -f2`
mqttuser=`cat $path/settings | grep mqttuser | cut -f2`
mqttpass=`cat $path/settings | grep mqttpass | cut -f2`
mqttport=`cat $path/settings | grep mqttport | cut -f2`
cloudurl="https://cloud.linked-go.com/cloudservice/api"
name=`cat $path/settings | grep hassname | cut -f2`

mkdir -p $path/tmp

update()
{
token=`curl -s -H "Content-Type: application/json; charset=utf-8" -X POST \
	-d '{"user_name":"'$username'",
		"password":"'$password'",
		"type":"2"}' $cloudurl/app/user/login.json | 
		jq -r '.object_result."x-token"'`
echo $token > $path/tmp/token

device=`curl -s -H "Content-Type: application/json; charset=utf-8" \
	-H "x-token: $token" -X POST $cloudurl/app/device/deviceList.json |
	jq -r '.object_result[]."device_code"'`
echo $device > $path/tmp/device
}

check=`find $path/tmp/token -newermt '-86400 seconds' | wc -l`
if [ $check -lt "1" ]; then
        update
fi

token=`cat $path/tmp/token`
device=`cat $path/tmp/device`

#Install entities to Hass
if [ $1 = "install" ]; then
	echo install
	mosquitto_pub -r -h $mqtt -p $mqttport -u $mqttuser -P $mqttpass \
		-t "homeassistant/sensor/"$name"_status/config" \
		-m '{"name": "'$name'_status", 
			"state_topic": "homeassistant/sensor/'$name'_status/state"}'

	mosquitto_pub -r -h $mqtt -p $mqttport -u $mqttuser -P $mqttpass \
		-t "homeassistant/binary_sensor/"$name"_power/config" \
		-m '{"name": "'$name'_power", 
			"state_topic": "homeassistant/binary_sensor/'$name'_power/state"}'

	mosquitto_pub -r -h $mqtt -p $mqttport -u $mqttuser -P $mqttpass \
		-t "homeassistant/binary_sensor/"$name"_silent/config" \
		-m '{"name": "'$name'_silent", 
			"state_topic": "homeassistant/binary_sensor/'$name'_silent/state"}'

	mosquitto_pub -r -h $mqtt -p $mqttport -u $mqttuser -P $mqttpass \
		-t "homeassistant/sensor/"$name"_settemp/config" \
		-m '{"name": "'$name'_settemp", 
			"device_class": "temperature", 
			"unit_of_measurement": "°C", 
			"state_topic": "homeassistant/sensor/'$name'_settemp/state"}'

	mosquitto_pub -r -h $mqtt -p $mqttport -u $mqttuser -P $mqttpass \
		-t "homeassistant/sensor/"$name"_inlet/config" \
		-m '{"name": "'$name'_inlet", 
			"device_class": "temperature", 
			"unit_of_measurement": "°C", 
			"state_topic": "homeassistant/sensor/'$name'_inlet/state"}'

	mosquitto_pub -r -h $mqtt -p $mqttport -u $mqttuser -P $mqttpass \
		-t "homeassistant/sensor/"$name"_outlet/config" \
		-m '{"name": "'$name'_outlet", 
			"device_class": "temperature", 
			"unit_of_measurement": "°C", 
			"state_topic": "homeassistant/sensor/'$name'_outlet/state"}'

	mosquitto_pub -r -h $mqtt -p $mqttport -u $mqttuser -P $mqttpass \
		-t "homeassistant/sensor/"$name"_mode_state/config" \
		-m '{"name": "'$name'_mode_state", 
			"state_topic": "homeassistant/sensor/'$name'_mode_state/state"}'

	mosquitto_pub -r -h $mqtt -p $mqttport -u $mqttuser -P $mqttpass \
		-t "homeassistant/sensor/"$name"_mode_set/config" \
		-m '{"name": "'$name'_mode_set", 
			"state_topic": "homeassistant/sensor/'$name'_mode_set/state"}'

	mosquitto_pub -r -h $mqtt -p $mqttport -u $mqttuser -P $mqttpass \
		-t "homeassistant/sensor/"$name"_error_msg_code/config" \
		-m '{"name": "'$name'_error_msg_code", 
			"state_topic": "homeassistant/sensor/'$name'_error_msg_code/state"}'

	mosquitto_pub -r -h $mqtt -p $mqttport -u $mqttuser -P $mqttpass \
		-t "homeassistant/switch/"$name"_silent/config" \
		-m '{"name": "'$name'_silent",
			"command_topic": "homeassistant/switch/'$name'_silent/set",
			"state_topic": "homeassistant/binary_sensor/'$name'_silent/state"}'

#	sed 's/%NAME%/'$name'/g' $path/climate.json > $path/tmp/climate.json
	mosquitto_pub -r -h $mqtt -p $mqttport -u $mqttuser -P $mqttpass \
		-t "homeassistant/climate/$name/config" \
		-m '{"name":"'$name'",
			"current_temperature_topic":"homeassistant/sensor/'$name'_inlet/state",
			"mode_command_topic":"homeassistant/sensor/'$name'_mode_set/state",
			"mode_state_topic":"homeassistant/sensor/'$name'_mode_state/state",
			"temperature_command_topic":"homeassistant/sensor/'$name'_settemp/state",
			"temperature_state_topic":"homeassistant/sensor/'$name'_settemp/state",
			"temperature_unit":"C",
			"min_temp":"15",
			"max_temp":"35",
			"temp_step":"0.5",
			"modes":["off", "heat", "cool", "auto"]}'

#uninstall entities from Hass
elif [ $1 = "uninstall" ]; then
	echo uninstall
	mosquitto_pub -r -h $mqtt -p $mqttport -u $mqttuser -P $mqttpass -m '' -t "homeassistant/sensor/"$name"_status/config"
	mosquitto_pub -r -h $mqtt -p $mqttport -u $mqttuser -P $mqttpass -m '' -t "homeassistant/binary_sensor/"$name"_power/config"
	mosquitto_pub -r -h $mqtt -p $mqttport -u $mqttuser -P $mqttpass -m '' -t "homeassistant/binary_sensor/"$name"_silent/config"
	mosquitto_pub -r -h $mqtt -p $mqttport -u $mqttuser -P $mqttpass -m '' -t "homeassistant/sensor/"$name"_settemp/config"
	mosquitto_pub -r -h $mqtt -p $mqttport -u $mqttuser -P $mqttpass -m '' -t "homeassistant/sensor/"$name"_inlet/config"
	mosquitto_pub -r -h $mqtt -p $mqttport -u $mqttuser -P $mqttpass -m '' -t "homeassistant/sensor/"$name"_outlet/config"
	mosquitto_pub -r -h $mqtt -p $mqttport -u $mqttuser -P $mqttpass -m '' -t "homeassistant/climate/$name/config"
	mosquitto_pub -r -h $mqtt -p $mqttport -u $mqttuser -P $mqttpass -m '' -t "homeassistant/sensor/"$name"_mode_state/config"
	mosquitto_pub -r -h $mqtt -p $mqttport -u $mqttuser -P $mqttpass -m '' -t "homeassistant/sensor/"$name"_mode_set/config"
	mosquitto_pub -r -h $mqtt -p $mqttport -u $mqttuser -P $mqttpass -m '' -t "homeassistant/sensor/"$name"_settemp/config"
	mosquitto_pub -r -h $mqtt -p $mqttport -u $mqttuser -P $mqttpass -m '' -t "homeassistant/switch/"$name"_silent/config"
	mosquitto_pub -r -h $mqtt -p $mqttport -u $mqttuser -P $mqttpass -m '' -t "homeassistant/sensor/"$name"_error_msg_code/config"

elif [ $1 = "status" ]; then
	curl -s -H "Content-Type: application/json; charset=utf-8" \
	-H "x-token: $token" \
	-d '{"device_code":"'$device'"}' \
	-X POST $cloudurl/app/device/getDeviceStatus.json > $path/tmp/status

	online=`cat $path/tmp/status | jq -r '.object_result."status"'`

	mosquitto_pub -r -h $mqtt -p $mqttport -u $mqttuser -P $mqttpass \
		-m "${online}" \
		-t "homeassistant/sensor/"$name"_status/state"

elif [ $1 = "info" ]; then
	curl -s -H "Content-Type: application/json; charset=utf-8" \
	-H "x-token: $token" \
	-d '{"device_code":"'$device'","protocal_codes":["Power","Mode","Manual-mute","T02","2074","2075","2076","2077","H03","Set_Temp","R08","R09","R10","R11","R01","R02","R03","T03","1158","1159","F17","H02"]}' \
	-X POST $cloudurl/app/device/getDataByCode.json > $path/tmp/info

	power=`cat $path/tmp/info | jq '.object_result[] | select(.code=="Power")' | jq -r '.value'`
	settemp=`cat $path/tmp/info | jq '.object_result[] | select(.code=="Set_Temp")' | jq -r '.value'`
	inlettemp=`cat $path/tmp/info | jq '.object_result[] | select(.code=="T02")' | jq -r '.value'`
	outlettemp=`cat $path/tmp/info | jq '.object_result[] | select(.code=="T03")' | jq -r '.value'`
	mode=`cat $path/tmp/info | jq '.object_result[] | select(.code=="Mode")' | jq -r '.value'`
	silent=`cat $path/tmp/info | jq '.object_result[] | select(.code=="Manual-mute")' | jq -r '.value'`
	error_msg_code=`cat $path/tmp/info | jq -r '.error_msg_code'`

	mosquitto_pub -r -h $mqtt -p $mqttport -u $mqttuser -P $mqttpass \
		-m "${settemp}" \
		-t "homeassistant/sensor/"$name"_settemp/state"

	mosquitto_pub -r -h $mqtt -p $mqttport -u $mqttuser -P $mqttpass \
		-m "${inlettemp}" \
		-t "homeassistant/sensor/"$name"_inlet/state"

	mosquitto_pub -r -h $mqtt -p $mqttport -u $mqttuser -P $mqttpass \
		-m "${outlettemp}" \
		-t "homeassistant/sensor/"$name"_outlet/state"

	mosquitto_pub -r -h $mqtt -p $mqttport -u $mqttuser -P $mqttpass \
		-m "${error_msg_code}" \
		-t "homeassistant/sensor/"$name"_error_msg_code/state"

	if [ $silent = "0" ];then
		mosquitto_pub -r -h $mqtt -p $mqttport -u $mqttuser -P $mqttpass \
			-m "OFF" \
			-t "homeassistant/binary_sensor/"$name"_silent/state"

	elif [ $silent = "1" ];then
		mosquitto_pub -r -h $mqtt -p $mqttport -u $mqttuser -P $mqttpass \
			-m "ON" \
			-t "homeassistant/binary_sensor/"$name"_silent/state"
	fi


	if [ $power = "0" ];then
		power="off"
		mosquitto_pub -r -h $mqtt -p $mqttport -u $mqttuser -P $mqttpass \
			-m "${power}" \
			-t "homeassistant/sensor/"$name"_mode_state/state"

		mosquitto_pub -r -h $mqtt -p $mqttport -u $mqttuser -P $mqttpass \
			-m "OFF" \
			-t "homeassistant/binary_sensor/"$name"_power/state"

	elif [ $power = "1" ];then
		power="on"
		mosquitto_pub -r -h $mqtt -p $mqttport -u $mqttuser -P $mqttpass \
			-m "ON" \
			-t "homeassistant/binary_sensor/"$name"_power/state"

		if [ $mode = "0" ];then
			mode="cool"
			mosquitto_pub -r -h $mqtt -p $mqttport -u $mqttuser -P $mqttpass \
				-m "${mode}" \
				-t "homeassistant/sensor/"$name"_mode_state/state"

		elif [ $mode = "1" ];then
			mode="heat"
			mosquitto_pub -r -h $mqtt -p $mqttport -u $mqttuser -P $mqttpass \
				-m "${mode}" \
				-t "homeassistant/sensor/"$name"_mode_state/state"

		elif [ $mode = "2" ];then
			mode="auto"
			mosquitto_pub -r -h $mqtt -p $mqttport -u $mqttuser -P $mqttpass \
				-m "${mode}" \
				-t "homeassistant/sensor/"$name"_mode_state/state"
		fi
	fi

#control

elif [ $1 = "on" ]; then
	curl -s -H "Content-Type: application/json; charset=utf-8" \
	-H "x-token: $token" \
	-d '{"param":[{"device_code":"'$device'","protocol_code":"power","value":"1"}]}' \
	-X POST $cloudurl/app/device/control.json

elif [ $1 = "off" ]; then
	curl -s -H "Content-Type: application/json; charset=utf-8" \
	-H "x-token: $token" \
	-d '{"param":[{"device_code":"'$device'","protocol_code":"power","value":"0"}]}' \
	-X POST $cloudurl/app/device/control.json

elif [ $1 = "temp" ]; then
	temp=$2
	curl -s -H "Content-Type: application/json; charset=utf-8" \
	-H "x-token: $token" \
	-d '{"param":[{"device_code":"'$device'","protocol_code":"R02","value":"'$temp'"},{"device_code":"'$device'","protocol_code":"Set_Temp","value":"'$temp'"}]}' \
	-X POST $cloudurl/app/device/control.json

elif [ $1 = "silent" ]; then
	if [ $2 = "ON" ];then
		mode="1"
	elif [ $2 = "OFF" ];then
		mode="0"
	fi
	curl -s -H "Content-Type: application/json; charset=utf-8" \
	-H "x-token: $token" \
	-d '{"param":[{"device_code":"'$device'","protocol_code":"Manual-mute","value":"'$mode'"}]}' \
	-X POST $cloudurl/app/device/control.json

elif [ $1 = "mode" ]; then

	mode()
	{
		curl -s -H "Content-Type: application/json; charset=utf-8" \
                -H "x-token: $1" \
                -d '{"param":[{"device_code":"'$2'","protocol_code":"mode","value":"'$3'"}]}' \
                -X POST $4/app/device/control.json
	}

	if [ $2 = "heat" ];then
		mode="1"
		mode $token $device $mode $cloudurl

	elif [ $2 = "cool" ];then
		mode="0"
		mode $token $device $mode $cloudurl

	elif [ $2 = "auto" ];then
		mode="2"
		mode $token $device $mode $cloudurl
	fi
fi


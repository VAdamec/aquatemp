#!/bin/bash

#Get setting etc

path=`dirname "$0":`
username=`cat $path/settings | grep username | cut -f2`
password=`cat $path/settings | grep password | cut -f2`
mqtt=`cat $path/settings | grep mqttserver | cut -f2`
mqttuser=`cat $path/settings | grep mqttuser | cut -f2`
mqttpass=`cat $path/settings | grep mqttpass | cut -f2`
mqttport=`cat $path/settings | grep mqttport | cut -f2`
cloudurl="https://cloud.linked-go.com:449/crmservice/api"
name=`cat $path/settings | grep hassname | cut -f2`

mkdir -p $path/tmp

update()
{
token=$(curl -s -H "Content-Type: application/json; charset=utf-8" -X POST \
  -d '{"password": "'$password'","loginSource": "IOS","areaCode": "en","appId": "16","type": "2","userName": "'$username'"}' \
  "${cloudurl}/app/user/login?lang=en" | jq -r '.objectResult."x-token"')
echo $token > $path/tmp/token

device=`curl -s -H "Content-Type: application/json; charset=utf-8" \
	-H "x-token: $token" -X POST $cloudurl/app/device/deviceList?lang=en |
	jq -r '.objectResult[]."deviceCode"'`
echo $device > $path/tmp/device
}

check=`find $path/tmp/token -mmin -1440 | wc -l`
if [[ $check -lt "1" ]]; then
        update
fi

token=`cat $path/tmp/token`
device=`cat $path/tmp/device`


power()
{
	curl -s -H "Content-Type: application/json; charset=utf-8" \
	-H "x-token: $token" \
	-d '{"param":[{"deviceCode":"'$device'","protocolCode":"Power","value":"'$1'"}]}' \
	-X POST $cloudurl/app/device/control?lang=en
}

#Install entities to Hass
if [[ $1 = "install" ]]; then
	echo install

	install()
	{
	mosquitto_pub -r -h $mqtt -p $mqttport  \
		-t "homeassistant/$1/"$name"_"$3"/config" \
		-m '{"name": "'$name' '"$2"'", 
			"state_topic": "homeassistant/'$1'/'$name'_'$3'/state"}'
	}

	install_dt()
	{
	mosquitto_pub -r -h $mqtt -p $mqttport  \
		-t "homeassistant/$1/"$name"_"$3"/config" \
		-m '{"name": "'$name' '"$2"'", 
			"device_class": "'$4'", 
			"unit_of_measurement": "'$5'", 
			"state_topic": "homeassistant/'$1'/'$name'_'$3'/state"}'
	}

	install sensor "Status" status
	install binary_sensor "Power" power
	install binary_sensor "Silent" silent
	install_dt sensor "Settemp" settemp temperature °C
	install_dt sensor "Readtemp" readtemp temperature °C
	install_dt sensor "Inlet" inlet temperature °C
	install_dt sensor "Outlet" outlet temperature °C
	install sensor "Mode State" mode_state 
	install sensor "Mode Set" mode_set 
	install sensor "Error msg" error_msg
	install sensor "Is fault" is_fault
	install_dt sensor "Ambient" ambient temperature °C
	install_dt sensor "Coil" coil temperature °C
	install_dt sensor "Suction" suction temperature °C

	mosquitto_pub -r -h $mqtt -p $mqttport  \
		-t "homeassistant/switch/"$name"_silent/config" \
		-m '{"name": "'$name' Silent",
			"command_topic": "homeassistant/switch/'$name'_silent/set",
			"state_topic": "homeassistant/binary_sensor/'$name'_silent/state"}'

	mosquitto_pub -r -h $mqtt -p $mqttport  \
		-t "homeassistant/climate/$name/config" \
		-m '{"name":"'$name'",
			"current_temperature_topic":"homeassistant/sensor/'$name'_inlet/state",
			"mode_command_topic":"homeassistant/sensor/'$name'_mode_set/state",
			"mode_state_topic":"homeassistant/sensor/'$name'_mode_state/state",
			"temperature_command_topic":"homeassistant/sensor/'$name'_settemp/state",
			"temperature_state_topic":"homeassistant/sensor/'$name'_readtemp/state",
			"temperature_unit":"C",
			"min_temp":"15",
			"max_temp":"35",
			"temp_step":"0.5",
			"modes":["off", "heat", "cool", "auto"]}'

#uninstall entities from Hass
elif [[ $1 = "uninstall" ]]; then
	echo uninstall
	uninstall()
	{
		mosquitto_pub -r -h $mqtt -p $mqttport  -m '' -t "homeassistant/"$1"/"$name"_"$2"/config"
	}
	uninstall sensor status
	uninstall binary_sensor Power
	uninstall binary_sensor silent
	uninstall sensor settemp
	uninstall sensor inlet
	uninstall sensor outlet
	uninstall sensor mode_state
	uninstall sensor mode_set
	uninstall sensor settemp
	uninstall sensor readtemp
	uninstall sensor error_msg
	uninstall sensor is_fault
	uninstall sensor ambient
	uninstall sensor coil
	uninstall sensor suction
	uninstall switch silent

	mosquitto_pub -r -h $mqtt -p $mqttport  -m '' -t "homeassistant/climate/$name/config"

elif [[ $1 = "status" ]]; then
	curl -s -H "Content-Type: application/json; charset=utf-8" \
	-H "x-token: $token" \
	-d '{"deviceCode":"'$device'"}' \
	-X POST $cloudurl/app/device/getDeviceStatus?lang=en > $path/tmp/status

	online=`cat $path/tmp/status | jq -r '.objectResult."status"'`
	is_fault=`cat $path/tmp/status | jq -r '.objectResult."is_fault"'`

#
# getFaultDataByDeviceCode doesn't exists
#
	if [[ $is_fault = "true" ]];then
		curl -s -H "Content-Type: application/json; charset=utf-8" \
		-H "x-token: $token" \
		-d '{"deviceCode":"'$device'"}' \
		-X POST $cloudurl/app/device/getFaultDataByDeviceCode?lang=en > $path/tmp/fault
		error_msg=`cat $path/tmp/fault | jq -r '.objectResult[]."description"' | head -n 1`
		mosquitto_pub -r -h $mqtt -p $mqttport  \
			-m "${error_msg}" \
			-t "homeassistant/sensor/"$name"_error_msg/state"

	elif [[ $is_fault = "false" ]];then
		error_msg="No Error"
		mosquitto_pub -r -h $mqtt -p $mqttport  \
			-m "${error_msg}" \
			-t "homeassistant/sensor/"$name"_error_msg/state"
	fi
	
	status()
	{
	mosquitto_pub -r -h $mqtt -p $mqttport  \
		-m "${1}" \
		-t "homeassistant/sensor/"$name"_"$2"/state"
	}

	status $online status
	status $is_fault is_fault

elif [[ $1 = "test" ]]; then
	curl -s -H "Content-Type: application/json; charset=utf-8" \
	-H "x-token: $token" \
	-d '{"deviceCode":"'$device'","protocolCode":["'$2'"]}' \
	-X POST $cloudurl/app/device/getDataByCode?lang=en > $path/tmp/test
	cat $path/tmp/test


elif [[ $1 = "info" ]]; then
	echo info
	curl -s -H "Content-Type: application/json; charset=utf-8" \
	-H "x-token: $token" \
	-d '{"deviceCode":"'$device'","appId": "16","protocalCodes":["Power", "Mode", "ModeState", "O01~014", "O01~023", "H21", "R01", "R02", "R03", "T39", "T04", "T01", "T08", "T09", "T02", "H25", "H28", "H31", "H22", "hanControl", "R08", "R09", "R10", "R11", "R36", "R37", "R70", "R71", "R72", "R73", "R74", "H01", "H05", "MainBoard Version", "code_version", "R35", "H07", "H10", "H18", "H20", "H27", "H29", "H30", "H32", "H33", "H35", "H36", "H37", "H40", "H41", "H42", "H43", "H45", "A03", "A04", "A05", "A06", "A11", "A21", "A22", "A23", "A24", "A25", "A26", "A27", "A28", "A29", "A30", "A31", "A32", "A33", "A34", "A35", "A38", "A39", "A40", "F01", "F02", "F03", "F05", "F06", "F10", "F18", "F19", "F21", "F22", "F23", "F25", "F26", "F27", "F28", "F29", "D01", "D02", "D03", "D04", "D05-1", "D05-2", "D07", "D08", "D09", "D10", "D11", "D12", "D13", "D14", "D15", "D16", "D17", "D18", "D19", "D20", "D21", "D22", "D23", "D24", "D25", "D26", "D30", "E01", "E02", "E03", "E07", "E08", "E09", "E10", "E13", "E14", "E17", "E18", "E19", "E03-1", "E03-2", "E03-3", "E03-4", "E03-5", "E07-1", "E07-2", "E07-3", "E07-4", "E07-5", "R04", "R05", "R06", "R07", "R15", "R16", "R17", "R29", "R30", "R31", "R32", "R33", "R34", "R39", "R40", "R41", "R42", "R43", "R44", "R45", "R46", "R60", "R61", "R62", "P01", "P02", "P03", "P05", "P06", "P08", "P09", "P10", "P11", "P12", "P13", "P14", "P15", "P16", "G01", "G02", "G03", "G04", "G05", "C01", "C02", "C03", "C04", "C05", "C06", "C07", "C08", "C09", "C10", "C11", "C12", "O15", "O17", "S01~S10", "T03", "T05", "T06", "T07", "T13", "T15", "T10", "T11", "T12", "T27", "T28", "T29", "T30", "T31", "T32", "T33", "T34", "T35", "T36", "T37", "T38", "T40", "T41", "T42", "T43", "T44", "T46", "T47", "T48", "Fault1", "Fault5", "Fault6", "1250", "1256", "1257", "1258", "1259", "1260", "1261", "1262", "1263", "1264", "1265", "1266", "1267", "1268", "1269", "KG1", "KG2", "KG3", "KG4", "KG5", "KG6", "KG7", "KG8", "KG9", "KG10", "KG11", "KG12", "KG13~KG28", "KG29~KG44", "KG45~KG60", "Timer_Mute_On_En", "TimerMuteOnHour", "TimerMuteOnMinute", "Timer_Mute_Off_En", "TimerMuteOffHour", "TimerMuteOffMinute", "2014", "compensate_slope", "compensate_offset", "InputCurrent1", "Z01", "Z17", "Zone 2 Water Target", "Zone 2 Cure Slope", "Zone 2 Curve Offset", "Zone 1 Room Temp", "Zone 2 Room Temp", "Zone 2 Mixing Temp", "Z02", "Z03", "Z05", "Z06", "Z04", "Z07", "Z08", "Z09", "Z10", "Z11", "Z12", "Z13", "Z14", "Z15", "Z19", "Z20", "M1 Start", "M1 End", "M2 Start", "M2 End", "M3 Start", "M3 End", "M4 Start", "M4 End", "M5 Start", "M5 End", "M6 Start", "M6 End", "M1_2 Enalbe", "M3_4 Enalbe", "M5_6 Enalbe", "M1 Mode", "M2 Mode", "M3 Mode", "M4 Mode", "M5 Mode", "M6 Mode", "M1 Hot Water Target", "M1 Heating Target", "M1 Cooling Target", "M2 Hot Water Target", "M2 Heating Target", "M2 Cooling Target", "M3 Hot Water Target", "M3 Heating Target", "M3 Cooling Target", "M4 Hot Water Target", "M4 Heating Target", "M4 Cooling Target", "M5 Hot Water Target", "M5 Heating Target", "M5 Cooling Target", "M6 Hot Water Target", "M6 Heating Target", "M6 Cooling Target", "M1 Max. Power", "M2 Max. Power", "M3 Max. Power", "M4 Max. Power", "M5 Max. Power", "M6 Max. Power", "SG01", "SG Status", "SG02", "SG03", "SG04", "SG05", "SG06", "SG07", "SG08"]}' \
	-X POST $cloudurl/app/device/getDataByCode?lang=en > $path/tmp/info

	power=`cat $path/tmp/info | jq '.objectResult[] | select(.code=="Power")' | jq -r '.value'`
	readtemp=`cat $path/tmp/info | jq '.objectResult[] | select(.code=="Set_Temp")' | jq -r '.value'`
	suctiontemp=`cat $path/tmp/info | jq '.objectResult[] | select(.code=="T01")' | jq -r '.value'`
	inlettemp=`cat $path/tmp/info | jq '.objectResult[] | select(.code=="T02")' | jq -r '.value'`
	outlettemp=`cat $path/tmp/info | jq '.objectResult[] | select(.code=="T03")' | jq -r '.value'`
	coiltemp=`cat $path/tmp/info | jq '.objectResult[] | select(.code=="T04")' | jq -r '.value'`
	ambienttemp=`cat $path/tmp/info | jq '.objectResult[] | select(.code=="T05")' | jq -r '.value'`
	mode=`cat $path/tmp/info | jq '.objectResult[] | select(.code=="Mode")' | jq -r '.value'`
	silent=`cat $path/tmp/info | jq '.objectResult[] | select(.code=="Manual-mute")' | jq -r '.value'`


mosquitto_status()
{
	        mosquitto_pub -r -h $mqtt -p $mqttport  \
                -m "${2}" \
                -t "homeassistant/$1/"$name"_$3/state"
}

	mosquitto_status sensor $readtemp readtemp
	mosquitto_status sensor $inlettemp inlet
	mosquitto_status sensor $outlettemp outlet
	mosquitto_status sensor $ambienttemp ambient
	mosquitto_status sensor $coiltemp coil
	mosquitto_status sensor $suctiontemp suction

	if [[ $silent = "0" ]];then

		mosquitto_status binary_sensor OFF silent

	elif [[ $silent = "1" ]];then
		mosquitto_status binary_sensor ON silent
	fi


	if [[ $power = "0" ]];then
		mosquitto_status sensor off mode_state
		mosquitto_status binary_sensor OFF power

	elif [[ $power = "1" ]];then
		mosquitto_status binary_sensor ON power
		if [[ $mode = "0" ]];then
			mosquitto_status sensor cool mode_state
		elif [[ $mode = "1" ]];then
			mosquitto_status sensor heat mode_state
		elif [[ $mode = "2" ]];then
			mosquitto_status sensor auto mode_state
		fi
	fi

#control

elif [[ $1 = "on" ]]; then
	power 1

elif [[ $1 = "off" ]]; then
	power 0

elif [[ $1 = "temp" ]]; then
	temp=$2
	curl -s -H "Content-Type: application/json; charset=utf-8" \
	-H "x-token: $token" \
	-d '{"param":[{"deviceCode":"'$device'","protocolCode":"R02","value":"'$temp'"},{"deviceCode":"'$device'","protocolCode":"Set_Temp","value":"'$temp'"}]}' \
	-X POST $cloudurl/app/device/control?lang=en

elif [[ $1 = "silent" ]]; then
	if [[ $2 = "ON" ]];then
		mode="1"
	elif [[ $2 = "OFF" ]];then
		mode="0"
	fi
	curl -s -H "Content-Type: application/json; charset=utf-8" \
	-H "x-token: $token" \
	-d '{"param":[{"deviceCode":"'$device'","protocolCode":"Timer_Mute_On_En","value":"'$mode'"}]}' \
	-X POST $cloudurl/app/device/control?lang=en

elif [[ $1 = "mode" ]]; then

	mode()
	{
		curl -s -H "Content-Type: application/json; charset=utf-8" \
                -H "x-token: $token" \
                -d '{"param":[{"deviceCode":"'$device'","protocolCode":"Mode","value":"'$mode'"}]}' \
                -X POST $cloudurl/app/device/control?lang=en
	}

	if [[ $2 = "heat" ]];then
		mode="1"
		mode

	elif [[ $2 = "cool" ]];then
		mode="0"
		mode

	elif [[ $2 = "auto" ]];then
		mode="2"
		mode
	fi
fi

